import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression

df = pd.read_csv("/content/full_data.csv")

df.head()

## checking for missing values
df.isnull().sum()

df.describe()

df[df.age < 1]

df.loc[df.age < 1,'age'] = 1

df[df.age < 2]

df.dtypes

df['age'] = df.age.astype(int)

df.dtypes

df[df.age < 2]

df.age.unique()

## checking distribution of age interval in data
plt.hist(df.age)
plt.show()

df.gender.unique()

## changing categorical to numeric data
df['gender'] = df['gender'].replace(['Male','Female'],[1,0])

df.head()

df.ever_married.unique()

## changing categorical to numeric data
df['ever_married'] = df['ever_married'].replace(['Yes','No'],[1,0])

df.work_type.unique()

## changing categorical to numeric data
df['work_type'] = df['work_type'].replace(['Govt_job','Self-employed','Private','children'],[1,2,3,4])

plt.hist(df.gender)
plt.show()

df.head()

df.Residence_type.unique()

## changing categorical to numeric data
df['Residence_type'] = df['Residence_type'].replace(['Urban','Rural'],[1,0])

df.avg_glucose_level = df.avg_glucose_level.astype(int)

plt.boxplot(df.avg_glucose_level)
plt.show()

df.smoking_status.unique()

## changing categorical to numeric data
df['smoking_status'] = df['smoking_status'].replace(['formerly smoked', 'never smoked', 'smokes', 'Unknown'],[2,1,3,0])

df.plot(x= 'smoking_status',y = 'age',style = 'o')
plt.show()

df.smoking_status.value_counts()

## considering the above graph making below age 3 unknown status to never smoked
df.loc[df.age<10,'smoking_status'] = 1

df.smoking_status.value_counts()

df.head()

l = []
for i in df.bmi:
  l.append(round(i))
print(l)

df.drop(columns='bmi',axis = 1,inplace = True)

df.insert(9,"bmi",l)

df.head()

df.columns

df.plot(x= 'gender',y='age',style = 'o')
plt.show()
df[['gender','age']].corr()

df.plot(x= 'hypertension',y='age',style = 'o')
plt.show()
df[['hypertension','age']].corr()

df.plot(x= 'hypertension',y='heart_disease',style = 'o')
plt.show()
df[['hypertension','heart_disease']].corr()

df.plot(x= 'ever_married',y='heart_disease',style = 'o')
plt.show()
df[['ever_married','heart_disease']].corr()

df.plot(x= 'avg_glucose_level',y='bmi',style = 'o')
plt.show()
df[['avg_glucose_level','bmi']].corr()

df.plot(x= 'avg_glucose_level',y='smoking_status',style = 'o')
plt.show()
df[['avg_glucose_level','smoking_status']].corr()

df.shape

df.drop_duplicates()

df.shape

df.columns

## Splitting
X = df.loc[:,['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',
       'work_type', 'Residence_type', 'avg_glucose_level', 'smoking_status',
       'bmi']].values
Y = df.loc[:,'stroke']
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2)


## Scalling
#scaler = StandardScaler()
#scaler.fit(X_train)
#X_train_scaled = scaler.transform(X_train)
#X_test_scaled = scaler.transform(X_test)

##Modelling
LogisticRegression = LogisticRegression()
LogisticRegression.fit(X_train,Y_train)
Y_pred = LogisticRegression.predict(X_test)

res = pd.DataFrame({"Actual": Y_test ,"Predict":Y_pred})

res.head()

res.Actual.value_counts()

from sklearn.metrics import plot_roc_curve,roc_auc_score,confusion_matrix,f1_score,accuracy_score

confusion_matrix(Y_test,Y_pred)
f1_score(Y_test,Y_pred)

accuracy_score(Y_test,Y_pred)

plot_roc_curve(LogisticRegression,X_test,Y_test)

Y_test.value_counts()

df.columns

a = [0,42,0,0,1,2,1,140,1,39]




LogisticRegression.predict([a])

LogisticRegression.predict_proba([a])

LogisticRegression.coef_

df.columns

